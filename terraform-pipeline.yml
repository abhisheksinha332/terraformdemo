# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
- group: Terraform_SPN

steps:
- script: echo $(ARM_CLIENT_ID)
  displayName: 'Run a one-line script'

- task: TerraformInstaller@2
  inputs:
    terraformVersion: 'latest'


- task: TerraformCLI@2
  inputs:
    command: 'init'
    commandOptions: '-var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var subscription_id=$(ARM_SUBSCRIPTION_ID) -var tenant_id=$(ARM_TENANT_ID)'
    backendType: 'azurerm'
    backendServiceArm: 'TerraformSPN'
    backendAzureRmTenantId: '$(ARM_TENANT_ID)'
    backendAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'Abhishek'
    backendAzureRmResourceGroupLocation: 'Central India'
    backendAzureRmStorageAccountName: 'abhishekxyz324'
    backendAzureRmContainerName: 'terraformstate'
    backendAzureRmKey: 'main.tfstate'
    allowTelemetryCollection: true


- task: TerraformCLI@2
  inputs:
    command: 'plan'
    commandOptions: '-var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var subscription_id=$(ARM_SUBSCRIPTION_ID) -var tenant_id=$(ARM_TENANT_ID)'
    allowTelemetryCollection: true
- task: TerraformCLI@2
  inputs:
    command: 'apply'
    commandOptions: '-var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var subscription_id=$(ARM_SUBSCRIPTION_ID) -var tenant_id=$(ARM_TENANT_ID)'
    allowTelemetryCollection: true


